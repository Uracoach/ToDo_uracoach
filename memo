#動かしたい時
#flask --app flask_todo_app run

#ブラウザ開くとき
#http:127.0.0.1:5000

#再起動時のターミナル操作
# 1. プロジェクトフォルダに移動
#cd C:\Users\short\Documents\UraCoach\flask_todo_app

# 2. 仮想環境を有効化
#.\venv\Scripts\activate

# 3. アプリケーションを起動
#python run.py

#今後の更新方法

    #今後、あなたのPCでコードを修正した場合は、まずGitHubにプッシュします（git add . → git commit → git push）。
    #次に、PythonAnywhereのBashコンソールで、プロジェクトフォルダに移動し（例： cd ToDo_uracoach）、git pull というコマンドを実行します。
    #これだけで、全ての変更が瞬時に反映されます。



#変更点?
    #以下に導入したいシステム、ならびにその詳細に関する追加要素を示します。
    #3.進捗について
        #これは、管理者ページから設定できる進捗を生徒一人ひとりに対して、用意し、のちのち、紙で印刷し、「今月の進捗はこれだよ～」という風に渡せるとよいと考えました。
    #4.デイリーミッション
        #これは週ごとに管理者ページから設定できるものにしたいです
        #そして設定が簡易的に、一挙にできるとなおよいと思います。
    #(5.学習ポイントと、報酬交換所
        #これについては、ToDoで見栄を張ったりしうるのでそれを対策できるような案が前提になってくると思われます。
        #例えば、タイマータブ的なのを用意して、そこで、その日のToDOを１つ選択し、タイマースタートからストップまで(休憩が設けれるようなシステムだとなおよい)の時間が実際の学習時間に記録され、チェックボックスも自動で入るようにしたい。ここで、一時中断し、別の強化をやりたいという人もいると思われるので、途中で一度中断できるようにできるとよい)
    #9.タイマー機能
        #これはタイマーそのものを純粋に導入するのもよいと考える。また、5.の仮案で上げたようなシステムでもよいと考える。
    #10.背景について
        #これは5.を導入するのであれば、選択できるようにしてもよいと考え得る。    

    ## まとめ（本番サイトの更新手順）

#今後のために、更新手順全体をまとめます。

    #PC側 (VS Code):
     #   コードを修正する
      #  git add .
       # git commit -m "更新内容のメモ"
        #git push origin main

    #サーバー側 (PythonAnywhere):
     #   「Consoles」→「Bash」でコンソールを開く
      #  cd ~/ToDo_uracoach
       # git pull origin main
        #「Web」タブに移動
        #「Reload」ボタンを押す

    #確認:
     #   ブラウザでサイトを開き、強制再読み込み